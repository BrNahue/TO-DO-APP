# To-do App Backend

Backend para una aplicación de tareas (To-do) desarrollado con Node.js, Express, TypeORM y PostgreSQL.

---

## Características

- Registro y login de usuarios con autenticación JWT
- CRUD de tareas asociadas a cada usuario
- Validación de datos con DTOs y middlewares
- Estructura modular y escalable
- Uso de variables de entorno para configuración segura

---

## Requisitos

- Node.js >= 18
- PostgreSQL >= 13

---

## Instalación

1. **Clona el repositorio:**

   ```sh
   git clone https://github.com/tu-usuario/to-do-app.git
   cd to-do-app/back
   ```

2. **Instala las dependencias:**

   ```sh
   npm install
   ```

3. **Configura las variables de entorno:**

   Crea un archivo `.env` en la carpeta `back` con el siguiente contenido:

   ```
   DATABASE_URL=postgresql://usuario:contraseña@localhost:5432/todo_app
   PORT=3000
   JWT_SECRET=tu_clave_secreta_jwt
   ```

   Cambia `usuario` y `contraseña` por los de tu base de datos.

4. **Crea la base de datos en PostgreSQL:**

   ```sql
   CREATE DATABASE todo_app;
   ```

5. **Inicia el servidor:**

   ```sh
   npm run dev
   ```

   El backend estará disponible en `http://localhost:3000`.

---

## Estructura del proyecto

```
back/
│
├── src/
│   ├── config/
│   ├── controllers/
│   ├── dto/
│   ├── entities/
│   ├── middlewares/
│   ├── routes/
│   ├── services/
│   ├── index.ts
│   └── server.ts
├── .env
├── package.json
└── tsconfig.json
```

---

## Rutas de la API

### Usuarios

- **POST `/users/register`**  
  Registra un nuevo usuario.  
  **Body:**  
  ```json
  {
    "username": "usuario",
    "password": "contraseña"
  }
  ```
  **Respuesta:**  
  ```json
  {
    "message": "Usuario registrado con éxito"
  }
  ```

- **POST `/users/login`**  
  Inicia sesión y devuelve un token JWT.  
  **Body:**  
  ```json
  {
    "username": "usuario",
    "password": "contraseña"
  }
  ```
  **Respuesta:**  
  ```json
  {
    "token": "jwt_token"
  }
  ```

---

### Tareas (protegidas con JWT)

> **Todas las rutas de tareas requieren el header:**  
> `Authorization: Bearer tu_token_jwt`

- **POST `/tasks/add`**  
  Crea una nueva tarea asociada al usuario autenticado.  
  **Body:**  
  ```json
  {
    "title": "Comprar",
    "description": "Comprar pan"
  }
  ```
  **Respuesta:**  
  ```json
  {
    "message": "Tarea agregada con éxito"
  }
  ```

- **GET `/tasks`**  
  Obtiene todas las tareas del usuario autenticado.  
  **Respuesta:**  
  ```json
  [
    {
      "id": "uuid",
      "title": "Comprar",
      "description": "Comprar pan",
      "completed": false
    }
  ]
  ```

- **PATCH `/tasks/update:id`**  
  Marca la tarea como completada (`completed: true`).  
  **Respuesta:**  
  ```json
  {
    "message": "Tarea actualizada",
    "task": { ... }
  }
  ```

- **DELETE `/tasks/delete:id`**  
  Elimina la tarea indicada por el id.  
  **Respuesta:**  
  ```json
  {
    "message": "Tarea eliminada"
  }
  ```

---

## Ejemplo de uso con Thunder Client / Postman

1. **Registra un usuario:**  
   POST `/users/register` con body `{ "username": "...", "password": "..." }`

2. **Haz login:**  
   POST `/users/login` y copia el token de la respuesta.

3. **Agrega el token en el header:**  
   `Authorization: Bearer tu_token_jwt`

4. **Crea, consulta, actualiza o elimina tareas usando las rutas protegidas.**

---

## Seguridad y buenas prácticas

- Las contraseñas se almacenan hasheadas.
- El token JWT nunca se guarda en la base de datos.
- Las rutas de tareas requieren autenticación.
- No expongas la ruta `GET /users` en producción.

---

## Notas adicionales

- Usa `synchronize: true` solo en desarrollo. Para producción, usa migraciones.
- Puedes extender la funcionalidad agregando validaciones con `class-validator`, paginación, filtros, etc.
- Si tienes dudas o quieres mejorar el proyecto, ¡puedes abrir issues o contribuir!

---

## Autor

Desarrollado por Nahuel Bericiartua.

---